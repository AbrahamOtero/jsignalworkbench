/*
 * DefaultIntervalAnnotation.java
 *
 * Created on 18 de julio de 2007, 13:06
 */

package net.javahispano.jsignalwb.plugins;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Window;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import net.javahispano.jsignalwb.JSWBManager;
import java.awt.geom.RoundRectangle2D;

/**
 *
 * @author Román Segador
 */
public class DefaultIntervalAnnotation extends AnnotationPluginAdapter{

    private long annotationTime;
    private long endTime;
    private String title;
    private String comentary;
    private String category;
    private Color color;
    private Image image;
    private BufferedImage bufferedImage;
    private boolean isImage;
    private String imagePath;
    private JSWBManager jswbManager;
    public DefaultIntervalAnnotation() {
        annotationTime=0;
        title="Write here the annotation title...";
        comentary="Write here your comentary....";
        color=Color.RED;
        imagePath="default";
        image=new ImageIcon(getClass().getResource("images/defaultIconMark.png")).getImage();
        jswbManager=null;
        setIsImage(false);
    }
    public String getName(){
        return "Default Interval Annotation";
    }

    public long getMarkTime() {
        return annotationTime;
    }

    public Image getImage() {
        return bufferedImage;
    }

    public void setAnnotationTime(long annotationTime) {
        this.annotationTime=annotationTime;
    }
    public void setEndTime(long endTime){
        this.endTime=endTime;
    }
    public long getEndTime(){
        return endTime;
    }

    public void setJSWBManager(JSWBManager jswbManager) {
        this.jswbManager=jswbManager;
    }

    public String getCategory() {
        return "cat3";
    }

    public boolean isInterval() {
        return true;
    }

    public void showMarkInfo(Window owner) {
        new DefaultIntervalAnnotationInfoPanel(this).showJWindow(owner);
    }

    public JSWBManager getJSWBManager(){
        return jswbManager;
    }
    public void setTitle(String title){
        this.title=title;
    }

    public void setComentary(String comentary){
        this.comentary=comentary;
    }

    public String getComentary(){
        return comentary;
    }
    public String getTitle(){
        return title;
    }

    public boolean hasDataToSave() {
        return true;
    }

    public String getDataToSave() {
        return "title:"+ title + "|| comentary:"+comentary +" || icon:"+
                imagePath+" || isImage:"+isImage+"|| color:"+color.getRGB();
    }



    public void setSavedData(String data) {
        data=data.substring(data.indexOf("title:")+6);
        title=data.substring(0,data.indexOf("||"));
        data=data.substring(data.indexOf("comentary:")+10);
        comentary=data.substring(0,data.indexOf("||"));
        data=data.substring(data.indexOf("icon:")+5);
        imagePath=data.substring(0,data.indexOf("||"));
        data=data.substring(data.indexOf("isImage:")+8);
        isImage=Boolean.parseBoolean(data.substring(0,data.indexOf("||")));
        data=data.substring(data.indexOf("color:")+6);
        color=new Color(Integer.parseInt(data));
        System.out.println(imagePath);
        if(!imagePath.trim().equals("default")){
            image=new ImageIcon(imagePath).getImage();
        }else{
            image=new ImageIcon(getClass().getResource("images/defaultIconMark.png")).getImage();
        }
            refreshBufferedImage();
    }

    public String getToolTipText() {
        return title;
    }

    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
        bufferedImage=new BufferedImage(5,15,BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d=bufferedImage.createGraphics();
        g2d.setColor(color);
       // g2d.fillRect(0,0,5,15);
       g2d.fill(new java.awt.geom.RoundRectangle2D.Float(0,0,150,50,25,25));
    }

    public void setImageToShow(Image image) {
        this.image = image;
        refreshBufferedImage();
    }
    public Image getImageToShow(){
        return image;
    }

    public boolean isImage() {
        return isImage;
    }

    public void setIsImage(boolean isImage) {
        this.isImage = isImage;
        refreshBufferedImage();
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    private void refreshBufferedImage(){
        if(isImage){
            bufferedImage=new BufferedImage(15,15,BufferedImage.TYPE_INT_RGB);
            Graphics2D g2d=bufferedImage.createGraphics();
           // g2d.drawImage(image,0,0,15,15,null);
            g2d.fill(new java.awt.geom.RoundRectangle2D.Float(0,0,150,50,25,25));
        }else{
            bufferedImage=new BufferedImage(5,15,BufferedImage.TYPE_INT_RGB);
            Graphics2D g2d=bufferedImage.createGraphics();
            g2d.setColor(Color.white);
          g2d.fillRect(0,0,150,50);
          g2d.setColor(color);
            g2d.fill(new java.awt.geom.RoundRectangle2D.Float(0,0,150,50,25,25));
        }
    }

}
