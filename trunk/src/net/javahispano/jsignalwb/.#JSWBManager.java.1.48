package net.javahispano.jsignalwb;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.SplashScreen;
import java.awt.Window;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import javax.swing.Action;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import net.javahispano.jsignalwb.io.IOManager;
import net.javahispano.jsignalwb.jsignalmonitor.JSignalMonitor;
import net.javahispano.jsignalwb.jsignalmonitor.JSignalMonitorDataSource;
import net.javahispano.jsignalwb.plugins.Algorithm;
import net.javahispano.jsignalwb.plugins.PluginLoadException;
import net.javahispano.jsignalwb.plugins.PluginManager;
import net.javahispano.jsignalwb.plugins.basicstats.BasicStatisticsPlugin;
import net.javahispano.jsignalwb.ui.AdjustSignalVisibleRangeAction;
import net.javahispano.jsignalwb.ui.AlgorithmAction;
import net.javahispano.jsignalwb.ui.AlgorithmExecutionJDialog;
import net.javahispano.jsignalwb.ui.JCheckBoxAddMarks;
import net.javahispano.jsignalwb.ui.JCheckBoxXY;
import net.javahispano.jsignalwb.ui.JMenuFile;
import net.javahispano.jsignalwb.ui.JMenuPlugins;
import net.javahispano.jsignalwb.ui.JMenuSignals;
import net.javahispano.jsignalwb.ui.JSWBFrame;
import net.javahispano.jsignalwb.ui.LookAndFeelAction;
import net.javahispano.jsignalwb.ui.OpenFileAction;
import net.javahispano.jsignalwb.ui.SaveAction;
import net.javahispano.jsignalwb.ui.GenericPluginAction;
import javax.swing.JLabel;
import javax.swing.*;
import net.javahispano.jsignalwb.jsignalmonitor.JSignalMonitorMark;
import net.javahispano.jsignalwb.plugins.DefaultInstantMark;
import net.javahispano.jsignalwb.plugins.MarkPlugin;
import net.javahispano.jsignalwb.plugins.Plugin;
import net.javahispano.jsignalwb.ui.MarksPopupMenu;


/**
 * Esta clase actúa a modo de fachada del framework, permitiendo acceder a la
 * mayor parte de la funcionalidad expuesta en la API de JSignalWorkbench.
 * También proporciona métodos para acceder a {@link JSignalMonitor], {@link
 * SignalManager} y a {@link PluginManager}, otras tres clases fachada que se
 * encargan de exponer funcionalidad relativa a la representacion de las señales,
 * las señales almacenadas en el entorno y los plugins disponibles,
 * respectivamente. No obstante, esta clase proporciona métodos para las
 * acciones más comunes que delegan su funcionalidad en otros métodos de estas
 * dos fachadas.
 *
 * @author Román Segador y Abraham Otero
 *    Copyright 2006-2007. This software is under the Apache License Version 2.0
 *   (http://www.apache.org/licenses/).
 */
public class JSWBManager implements JSignalMonitorDataSource,
        SignalSizeListener {

    //private static JSWBManager jswbmanager = null;
    private JSignalMonitor jSignalMonitor = null;
    private static String pluginsPath;
    private JSWBFrame jswbFrame;
    private SignalManager signalManager;
    private IOManager iOManager;
    private PluginManager pluginManager;
    private ArrayList<IntervalSelectedListener> intervalSelectedListeners;

    /** Creates a new instance of JSWBManager */
    private JSWBManager() {
        /*if (jswbmanager != null) {
            throw new RuntimeException(
                    "JSWBManager had been initialized before");
                 }*/
        intervalSelectedListeners = new ArrayList<IntervalSelectedListener>();
        jSignalMonitor = new JSignalMonitor(this);
        signalManager = new SignalManager(jSignalMonitor);
        signalManager.addListener(this);
        pluginManager = new PluginManager(pluginsPath);
        iOManager = new IOManager(signalManager, pluginManager);
        initJFrame();
    }

    /**
     * Añade un {@link Action} a la barra de herramientas de la ventana
     * principal.
     *
     * @param action Action a añadir.
     * @todo comprobar que funciona correctamente.
     * @todo (Román)Proporcionar métodos para eliminar acciones y para listar
     *   todas las acciones que tiene añadidas en un determinado momento la
     *   barra.
     */
    public void addJToolBarButton(Action action) {
        jswbFrame.addJToolBarItem(action);
    }

    /**
     * Añade el componente que se le pasa como parámetro a la izquierda de
     * {@link JSignalMonitor}. Provoca una validación (validate) de la ventana
     * principal. Si ya había algún componente en esa posición será eliminado y
     * se añadirá el componente nuevo.
     *
     * @param panel componente a añadir.
     * @todo comprobar que funciona correctamente.
     */
    public void setLeftComponent(JComponent component) {
        jswbFrame.setLeftComponent(component);
        jswbFrame.validate();
    }

    /**
     * Añade el componente que se le pasa como parámetro a la derecha de
     * {@link JSignalMonitor}. Provoca una validación (validate) de la ventana
     * principal. Si ya había algún componente en esa posición será eliminado y
     * se añadirá el componente nuevo.
     *
     * @param panel componente a añadir.
     * @todo comprobar que funciona correctamente.
     */
    public void setRightComponent(JComponent component) {
        jswbFrame.setRightComponent(component);
        jswbFrame.validate();
    }

    /**
     * Añade el componente que se le pasa como parámetro encima de
     * {@link JSignalMonitor}. Provoca una validación (validate) de la ventana
     * principal. Si ya había algún componente en esa posición será eliminado y
     * se añadirá el componente nuevo.
     *
     * @param panel componente a añadir.
     * @todo comprobar que funciona correctamente.
     */
    public void setUpperComponent(JComponent component) {
        jswbFrame.setUpperComponent(component);
        jswbFrame.validate();
    }

    /**
     * Añade el componente que se le pasa como parámetro debajo de
     * {@link JSignalMonitor}. Provoca una validación (validate) de la ventana
     * principal. Si ya había algún componente en esa posición será eliminado y
     * se añadirá el componente nuevo.
     *
     * @param panel componente a añadir.
     * @todo comprobar que funciona correctamente.
     */
    public void setLowerComponent(JComponent component) {
        jswbFrame.setLowerComponent(component);
        jswbFrame.validate();
    }

    /**
     * Devuelve el {@link JSignalMonitor}que est\u2193 empleando la aplicación.
     *
     * @return JSignalMonitor
     */
    public JSignalMonitor getJSignalMonitor() {
        return jSignalMonitor;
    }

    /**
     * Devuelve un HashMap cuyas claves son los diferentes tipos de plugins que
     * existen en el entorno y el objeto asociado con cada clave una lista de
     * todos los plugins de ese tipo asociados con dicha clave. Si no existiesen
     * plugins de algún tipo la clave correspondiente no estaría en el HashMap.
     *
     * @return HashMap
     */
    public HashMap<String, ArrayList<String>> getPluginNames() {
        return pluginManager.getRegisteredPlugins();
    }

    /**
     * Indica si debe o no mostrarse una señal.
     *
     * @param signalName nombre de la señal.
     * @param visible true si debe mostrarse, false en caso contrario.
     * @return true si la acción se realizó correctamente, false en caso
     *   contrario.
     */
    public boolean setChannelVisible(String signalName, boolean visible) {
        Signal s = getSignalManager().getSignal(signalName);
        if (s != null) {
            s.getProperties().setVisible(visible);

            if (!visible) {
                return jSignalMonitor.removeChannel(signalName);
            } else {
                return jSignalMonitor.addChannel(s.getName(), s.getProperties());
            }
        }
        return false;

    }

    /**
     * Elimina por completo la señal pasada como argumento.
     *
     * @param signalName nombre de la señal.
     * @throws {@link SignalNotFoundException} si la señal a eliminar no
     *   existe.
     */
    public void removeSignal(String signalName) throws SignalNotFoundException{
         getSignalManager().removeSignal(signalName);
    }

    public float getChannelValueAtTime(String signalName, long time) {
        Signal signal = signalManager.getSignal(signalName);
        if (signal != null) {
            int pos = TimePositionConverter.timeToPosition(signal.getProperties().
                    getStartTime(), time, signal.getProperties().getDataRate());
            if (pos >= 0 && pos < signal.getValues().length) {
                return signal.getValues()[pos];
            }
            //si la señal no esta definida en ese instante
            return 0;
        }
        System.out.println("Attempt of obtaining the value of a non existent signal "+ signalName);
        throw new SignalNotFoundException(signalName,"Attempt of obtaining the value of a non existent signal "+ signalName);
    }

    public List<JSignalMonitorMark> getChannelMark(String signalName,long firstValue,
                                           long lastValue){
        ArrayList<JSignalMonitorMark> temp=new ArrayList<JSignalMonitorMark>();
        for(MarkPlugin mp:signalManager.getSignalMarks(signalName,firstValue,lastValue))
            temp.add(mp);
        return temp;
    }

    public void notifyMarkAdded(String signalName, long time) {
        JPopupMenu popup =new MarksPopupMenu(this,signalName,time);
        Point p=MouseInfo.getPointerInfo().getLocation();
        popup.show(null,(int)p.getX(),(int)p.getY());
    }

    public void notifyMarkAdded(String signalName, long startTime,long endTime) {
        JPopupMenu popup =new MarksPopupMenu(this,signalName,startTime,endTime);
        Point p=MouseInfo.getPointerInfo().getLocation();
        popup.show(null,(int)p.getX(),(int)p.getY());
    }

    public float[] getChannelData(String signalName, long firstValue,
                                  long lastValue) {
        Signal signal = signalManager.getSignal(signalName);
        if (signal != null) {
            int pos1 = TimePositionConverter.timeToPosition(signal.
                    getProperties().getStartTime(), firstValue,
                    signal.getProperties().getDataRate());
            int pos2 = TimePositionConverter.timeToPosition(signal.
                    getProperties().getStartTime(), lastValue,
                    signal.getProperties().getDataRate());

            return getChannelData(signal.getValues(), pos1, pos2,signal.getProperties().getAbscissaValue());
        }
        throw new SignalNotFoundException(signalName,"Attempt of obtaining values of a non existent signal");

    }

    public short[] getSignalEmphasisLevels(String signalName, long firstValue,
                                    long lastValue) {

        Signal signal = signalManager.getSignal(signalName);
        if (signal == null) {
             throw new SignalNotFoundException(signalName,"Attempt of obtaining emphasis levels of a non existent signal");
        }
        int pos1 = TimePositionConverter.timeToPosition(signal.getProperties().
                getStartTime(), firstValue, signal.getProperties().getDataRate());
        int pos2 = TimePositionConverter.timeToPosition(signal.getProperties().
                getStartTime(), lastValue, signal.getProperties().getDataRate());
        return getChannelColors(signal.getEmphasisLevel(), pos1, pos2);
    }

    public void notifyIntervalSelection(String channelName, long startTime,
                                 long endTime) {
        fireIntervalSelectedEvent(new IntervalSelectedEvent(channelName,
                startTime,
                endTime));

    }


    /**
     * Añade un {@link IntervalSelectedListener} a la lista de listeners que
     * desean ser notificados de eventos de selección. Ademas indica a {@link
     * JSignalMonitor} que debe seleccionar un intervalo.
     *
     * @param listener IntervalSelectedListener
     */
    public void selectInterval(IntervalSelectedListener listener) {
        intervalSelectedListeners.add(listener);
        jSignalMonitor.setSelectIntervalMode(true);
    }


    /**
     * No diseñado como parte del API.
     * @todo (Abraham) Sí lo considero una parte del API. Este metodo es el que
     * se encarga de mostrar la interfaz de seleccion de señales previa a la ejecucion
     * de un algorithm. Si alguien desea crearse un acceso directo en, por ejemplo,
     * un panel nuevo añadido a la aplicacion, para ejecutar determinado plugin,
     * debera llamar a este metodo. Sin embargo tambien es posible que le forcemos
     * a que utilice el AlgorithmAction para lanzarlo, con lo que ya no necesitaria
     * este metodo. Mi opinion es q deberia formar parte del API.
     */
    public boolean showPluginExecution(String pluginType, String name) {
        if (pluginType.equals("algorithm")) {
            pluginManager.getAlgorithm(name).launchExecutionGUI(this);
            return true;
        }else if(pluginType.equals("generic")){
            pluginManager.getGeneric(name).launch(this);
            return true;
        }
        return false;
    }
/**
     * Muestra el cuadro de diálogo de configuración de un plugin.
     *
     * @param pluginType tipo del plugin.
     * @param name nombre del plugin.
     * @return True si la acción concluyó con éxito, false en caso contrario.
     */
    public boolean showPluginConfiguration(String pluginType, String name) {
        Plugin plug=pluginManager.getPlugin(pluginType+":"+name);
        if (plug!=null && plug.hasOwnConfigureGUI()) {
                plug.launchConfigureGUI(this);
                return true;
        } else {
            JOptionPane.showMessageDialog(getParentWindow(),
                                          "This Plugin(" + name +
                                          ") hasn't configuration window");
            return false;
        }

    }

    /**
     * No diseñado como parte del API.
     * @todo (Abraham) Mismo caso que ShowAlgorithmExecution;
     */
    public boolean showAlgorithmResults(String algorithmName) {
        Algorithm alg = pluginManager.getAlgorithm(algorithmName);
        if (alg!=null && alg.hasResultsGUI()) {
            alg.launchResultsGUI(this);
            return true;
        } else {
            JOptionPane.showMessageDialog(getParentWindow(), "This algorithm" +
                                          " hasn't results window");
            return true;
        }

    }

    /**
     * No diseñado como parte del API.
     * @todo (Abraham) Casi similar al de showPluginExecution. Creo que deberia formar
     *       parte de la API, ya que alguien puede querer ejecutar un algorithm
     *       sin necesidad de tener que seleccionar señeles a modo de acceso. Por
     *       ejemplo para ejecutar un algorithm para todas las señales completas le
     *       vale con llamar a este metodo con el Algorithm y una llamada a sm.getSignalsNames().
     *       No obstante si que es cierto que si incluimos estos metodos en la API puede llevar
     *       a confusion y que la gente los utilice directamente sin pasar por el
     *       showPluginExecution. Aunque creo que con documentarlo bien serviria.
     */
    public boolean runAlgorithm(Algorithm alg, Enumeration signals) {
        return runAlgorithm(alg, signals, null);
    }

    public boolean runAlgorithm(Algorithm alg, Enumeration signals,
                                PropertyChangeListener pcl) {
        ArrayList<SignalIntervalProperties> intervals =
                new ArrayList<SignalIntervalProperties>();
        while (signals.hasMoreElements()) {
            intervals.add(new SignalIntervalProperties(
                    signalManager.getSignal(signals.nextElement().toString())));
        }
        runAlgorithm(alg,intervals,pcl);
        return true;
    }

    /**
     * No diseñado como parte del API.
     * @todo (Roman) verificar que el javadoc es correcto.
     */
    public boolean runAlgorithm(Algorithm alg,
                                ArrayList<IntervalSelectedEvent> intervals) {
        return runAlgorithm(alg, intervals, null);
    }


    public boolean runAlgorithm(Algorithm alg,
                                ArrayList<IntervalSelectedEvent> intervals,
            PropertyChangeListener pcl) {
        ArrayList<SignalIntervalProperties>
                signals = new ArrayList<SignalIntervalProperties>();
        for (IntervalSelectedEvent interval : intervals) {
            Signal signal = signalManager.getSignal(interval.getChannelName());
            if (interval.isFullSignal()) {
                signals.add(new SignalIntervalProperties(signal));
            } else {
                signals.add(new SignalIntervalProperties(
                        signal,
                        interval.getStartTime(), interval.getEndTime(),
                        TimePositionConverter.timeToPosition(signal.getStart(),
                        interval.getStartTime(), signal.getSRate()),
                        TimePositionConverter.timeToPosition(signal.getStart(),
                        interval.getEndTime(), signal.getSRate())));
            }
        }
        runAlgorithm(alg,signals,pcl);
        return true;
    }


    private void runAlgorithm(Algorithm alg,ArrayList<SignalIntervalProperties> intervals,
            PropertyChangeListener pcl){
        JDialog jd = new AlgorithmExecutionJDialog(alg, intervals, pcl, this);
        if (alg.hasResultsGUI()) {
            alg.launchResultsGUI(this);
        }
    }



    /**
     * Devuelve el {@link PluginManager}.
     *
     * @param pluginsPath Directorio donde el {@link PluginManager} debe buscar
     *   los plugins.
     * @return PluginManager
     */
    public PluginManager getPluginManager(String pluginsPath) {
        pluginManager.setDefaultDirectory(pluginsPath);
        return pluginManager;
    }

    /**
     * Devuelve el {@link PluginManager}.
     *
     * @return PluginManager
     */
    public PluginManager getPluginManager() {
        return pluginManager;
    }

    /**
     * Devuelve el {@link IOManager}.
     *
     * @return IOManager
     */
    public IOManager getIOManager() {
        return iOManager;
    }

    /**
     * No diseñado como parte del API.
     */
    public boolean loadChannels(String loaderName, File f) {
        try {
            if (!iOManager.loadSignals(f, loaderName, true)) {
                JOptionPane.showMessageDialog(jswbFrame,
                                              "Alguna señal no se ha cargado");
            }
            this.getJSignalMonitor().repaintAll();
        } catch (PluginLoadException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(jswbFrame, ex.getMessage());
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(jswbFrame,
                                          "Error al cargar el fichero:\n" +
                                          ex.getMessage());
        }
        return false;
    }

    /**
     * Devuelve el {@link SignalManager}.
     *
     * @return SignalManager
     */
    public SignalManager getSignalManager() {
        return signalManager;
    }

    /**
     * No diseñado como parte del API.
     * @todo (Roman) verificar que el javadoc es correcto.
     */
    public void signalSizeActionPerformed(SignalSizeEvent evt) {
        Signal s = evt.getSignal();

        if (evt.isSignalAdded()) {
            if (s.getProperties().isVisible()) {
                jSignalMonitor.addChannel(s.getName(), s.getProperties());
            }
        } else {
            if (evt.isSignalRemoved()) {
                jSignalMonitor.removeChannel(evt.getSignal().getName());
            } else {
                if (evt.isSignalsReset()) {
                    jSignalMonitor.removeAllChannels();
                }
            }
        }
        jSignalMonitor.repaintAll();
    }

    /**
     * Establece el valor máximo y mínimo a mostrar en pantalla para el eje de
     * las ordenadas para la señal indicada.
     *
     * @param signalName Señal a la cual va a afectar el nuevo rango.
     * @param minValue Valor mínimo del eje de ordenadas.
     * @param maxValue Valor máximo del eje de ordenadas.
     * @throws {@link SignalNotFoundException} si no hay una señal con el
     *   nombre indicado cargada y el entorno.
     */
    public void setSignalVisibleRange(String signalName,
                                         float minValue, float maxValue) {
        signalManager.setSignalVisibleRange(signalName, minValue, maxValue);
    }

    /**
     * Establece el valor máximo y mínimo a mostrar en pantalla para el eje de
     * las ordenadas para todas las señales.
     *
     * @param minValue Valor mínimo del eje de ordenadas.
     * @param maxValue Valor máximo del eje de ordenadas.
     * @throws {@link SignalNotFoundException} si no hay una señal con el
     *   nombre indicado cargada y el entorno.
     */
    public boolean setSignalVisibleRange(float minValue, float maxValue) {
        return signalManager.setSignalVisibleRange(minValue, maxValue);
    }

    /**
     * Establece como valores máximo y mínimo del eje de ordenadas de la señal que
     * se le pasa como argumento el valor máximo y mínimo de la señal.
     *
     * @param signalName nombre de la señal.
     * @throws {@link SignalNotFoundException} si no hay una señal con el
     *   nombre indicado cargada y el entorno.
     */
    public void adjustVisibleRange(String signalName) {
        signalManager.adjustVisibleRange(signalName);
    }

    /**
    * Establece como valores máximo y mínimo del eje de abcisas de todas las
    * señales el valor máximo y mínimo de cada señal.
    */
   public void adjustVisibleRange() {
        signalManager.adjustVisibleRange();
    }

    /**
     * Devuelve el contenedor del sistema operativo sobre el cual se está
     * ejecutando JSignalWorkbench. Es útil para crear cuadros de diálogo
     * modales.
     *
     * @return Window
     */
    public Window getParentWindow() {
        return jswbFrame;
    }

    private void fireIntervalSelectedEvent(IntervalSelectedEvent evt) {
        IntervalSelectedListener listeners[] =
                intervalSelectedListeners.toArray(
                        new IntervalSelectedListener[intervalSelectedListeners.
                        size()]);
        intervalSelectedListeners.clear();
        for (int index = 0; index < listeners.length; index++) {
            listeners[index].intervalSelectedActionPerformed(evt);
        }

    }
    /**
     *
     * que se ejecute adecuadamente aunque no haya parámetros de la consola
     * @todo obtener los plugin de desarrollo de un modo adecuado
     *
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                String path = "";
                pluginsPath = ".";
                boolean develop = false; //cierto sólo si se está usando el framework para el desarrollo de plugings
                try {
                    path = args[0];
                    pluginsPath = args[1];
                    develop = Boolean.parseBoolean(args[2]);
                } catch (Exception ex) {
                    //no se proporciona parmetro y se usa el valor por defecto
                }
                SplashScreen splash = SplashScreen.getSplashScreen();
                if (splash != null) {
                    try {

                        //splash.setImageURL(new File("c:/proyecto/JSW1/src/images/notAvailable.jpg").toURI().toURL());
                        Graphics2D g2d = splash.createGraphics();
                        g2d.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
                        Rectangle2D r = new Rectangle2D.Double(50, 40, 90, 17);
                        for (int i = 0; i < 101; i += 5) {
                            g2d.setColor(Color.YELLOW);
                            g2d.fill(r);
                            g2d.setColor(Color.RED);
                            g2d.drawString("Loading...." + i + "%", 50, 50);

                            splash.update();
                            Thread.sleep(200);
                        }
                    } catch (IllegalStateException ex) {
                        ex.printStackTrace();
                    } catch (NullPointerException ex) {
                        ex.printStackTrace();
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
                JSWBManager jswbManager = new JSWBManager();
                if (develop) {
                    Object[] plugins = new Object[6];
                    String[] names = new String[6];
                    String[] types = new String[6];
                    names[0] = "Estadistico";
                    types[0] = "algorithm";
                    BasicStatisticsPlugin p = new net.javahispano.jsignalwb.
                                              plugins.basicstats.
                                              BasicStatisticsPlugin();
                    plugins[0] = p;
                    names[1] = "Media movil";
                    types[1] = "algorithm";
                    plugins[1] = new net.javahispano.jsignalwb.plugins.
                                 basicstats.MobileMeanPlugin();
                    names[2] = "Mark Negative Values";
                    types[2] = "algorithm";
                    plugins[2] = new net.javahispano.jsignalwb.plugins.
                                 marknegative.MarkNegative();
                    names[3] = "TRACE importer";
                    types[3] = "loader";
                    plugins[3] = new es.usc.gsi.trace.importer.TraceImporter();
                    names[4] = "Converor datos MIT-BIH";
                    types[4] = "generic";
                    plugins[4] = new es.usc.gsi.conversorDatosMIT.
                                 ConversorDatosMITPlugin();

                    names[5] = "Apnea";
                    types[5] = "algorithm";
                    plugins[5] = new a.Apnea();

                    jswbManager.getPluginManager(
                            pluginsPath).searchPlugins(names, types, plugins);
                    jswbManager.loadChannels(
                            "defaultLoader", new File(path));
                    jswbManager.refreshJToolBar();

                } else {
                    jswbManager.getPluginManager(
                            pluginsPath).searchPlugins();
                    jswbManager.refreshJToolBar();
                }
                jswbManager.getJSignalMonitor().repaintChannels();
            }
        });
    }

    private void initJFrame() {
        jswbFrame = new JSWBFrame(jSignalMonitor, getPluginManager(pluginsPath));
        jswbFrame.addMenu(new JMenuFile(this));
        jswbFrame.addMenu(new JMenuSignals(this));
        jswbFrame.addMenu(new JMenuPlugins(this));

        //jswbFrame.addMenuItem(new JMenuItem(new OpenFileAction(jswbFrame)));
        //jswbFrame.addMenuItem(new JMenuItem(new SaveAction(jswbFrame,iom)));
        jswbFrame.setVisible(true);
    }

    private void initJToolBar() {
        jswbFrame.addJToolBarItem(new OpenFileAction(this));
        jswbFrame.addJToolBarItem(new SaveAction(getParentWindow(), this), true);
        HashMap<String, ArrayList<String>> plugins = pluginManager.getRegisteredPlugins();
        ArrayList<String> algorithms = plugins.get("algorithm");
        if (algorithms != null) {
            jswbFrame.addJTollBarItem(new JLabel(" Algorithms: "));
            for (String algorithm : algorithms) {
                jswbFrame.addJToolBarItem(new AlgorithmAction(algorithm,
                        AlgorithmAction.RUN_ACTION, this));
            }

        }
        jswbFrame.addJToolBarSeparator();
        ArrayList<String> genericPlugins = plugins.get("generic");
        if (genericPlugins != null) {
            jswbFrame.addJTollBarItem(new JLabel(" Generics: "));
            for (String genericPlugin : genericPlugins) {
                jswbFrame.addJToolBarItem(new GenericPluginAction(this,genericPlugin,
                        GenericPluginAction.LAUNCH_ACTION));
            }
        }

        jswbFrame.addJToolBarSeparator();

        jswbFrame.addJToolBarItem(new AdjustSignalVisibleRangeAction(this));
        jswbFrame.addJTollBarItem(new JCheckBoxXY(jSignalMonitor));
        jswbFrame.addJTollBarItem(new JCheckBoxAddMarks(jSignalMonitor));
        jswbFrame.addJToolBarSeparator();
        jswbFrame.addJToolBarItem(new LookAndFeelAction(jswbFrame));
    }

    private void refreshJToolBar() {
        jswbFrame.cleanJToolBar();
        initJToolBar();
    }

    /**
     * getChannelData
     *
     * @param signalValues float[]
     * @param pos1 int
     * @param pos2 int
     * @return float[]
     */
    private float[] getChannelData(float[] signalValues, int pos1, int pos2) {
        return getChannelData(signalValues,pos1,pos2,0);
    }/**
     * getChannelData
     *
     * @param signalValues float[]
     * @param pos1 int
     * @param pos2 int
     * @return float[]
     */
    private float[] getChannelData(float[] signalValues, int pos1, int pos2,float defaultValue) {
        if (pos2 < pos1) {
            int a;
            a = pos2;
            pos2 = pos1;
            pos1 = a;
        }

        float[] partialValues = new float[pos2 - pos1 + 1];
        for (int index = pos1, index2 = 0; index < pos2; index++, index2++) {
            if (index < 0 || index >= signalValues.length) {
                partialValues[index2] = defaultValue;
            } else {
                partialValues[index2] = signalValues[index];
            }
        }
        return partialValues;
    }


    private short[] getChannelColors(short[] signalColors, int pos1, int pos2) {
        if (pos2 < pos1) {
            pos2 = pos1;
        }
        short[] partialValues = new short[pos2 - pos1 + 1];
        for (int index = pos1, index2 = 0; index <= pos2; index++, index2++) {
            if (index < 0 || index >= signalColors.length) {
                partialValues[index2] = 0;
            } else {
                partialValues[index2] = signalColors[index];
            }
        }
        return partialValues;
    }
}
